# -*- python -*-
import os.path
from distutils.version import LooseVersion
import re
import subprocess

Import('env testruns')
# LLVM-related flags
Import('llvm_computed_shared_lib_name')
Import('llvm_config_sanitizer')
Import('llvm_config_version')
Import('llvm_linkage_type_flag')
Import('llvm_required_components')
Import('llvm_system_libs_flag')
Import('llvm_use_computed_shared_lib_name')
Import('llvm_use_shared')

dist_headers = [
    "hammer.h",
    "allocator.h",
    "compiler_specifics.h",
    "glue.h",
    "internal.h",
    "platform.h"
]

parsers_headers = [
    "parsers/parser_internal.h"
]

backends_headers = [
    "backends/regex.h",
    "backends/contextfree.h"
]

parsers = ['parsers/%s.c'%s for s in
           ['action',
            'and',
            'attr_bool',
            'bind',
            'bits',
            'butnot',
            'ch',
            'charset',
            'choice',
            'difference',
            'end',
            'endianness',
            'epsilon',
            'ignore',
            'ignoreseq',
            'indirect',
            'int_range',
            'many',
            'not',
            'nothing',
            'optional',
            'permutation',
            'sequence',
            'token',
            'unimplemented',
            'whitespace',
            'xor',
            'value']] 

backends = ['backends/%s.c' % s for s in
            ['packrat', 'llk', 'regex', 'glr', 'lalr', 'lr', 'lr0', 'llvm']]

misc_hammer_parts = [
    'allocator.c',
    'benchmark.c',
    'bitreader.c',
    'bitwriter.c',
    'cfgrammar.c',
    'datastructures.c',
    'desugar.c',
    'glue.c',
    'hammer.c',
    'platform_bsdlike.c',
    'pprint.c',
    'registry.c',
    'system_allocator.c']

ctests = ['t_benchmark.c',
          't_bitreader.c',
          't_bitwriter.c',
          't_parser.c',
          't_grammar.c',
          't_misc.c',
	  't_regression.c']

env.ParseConfig('%s --cflags --ldflags' % env["LLVM_CONFIG"], function=llvm_config_sanitizer.sanitize)
libhammer_static = env.StaticLibrary('hammer', parsers + backends + misc_hammer_parts)

# Use a cloned env for the shared library so we can have library dependencies
shared_env = env.Clone()
# Get LLVM stuff into LIBS/LDFLAGS
shared_env.ParseConfig('%s --ldflags %s %s %s' % \
                       (env["LLVM_CONFIG"], llvm_system_libs_flag, llvm_linkage_type_flag, llvm_required_components), \
                       function=llvm_config_sanitizer.sanitize)
# Get the right -l lines in
if llvm_use_shared:
    if llvm_use_computed_shared_lib_name:
        shared_env.Append(LIBS=[llvm_computed_shared_lib_name, ])
    else:
        shared_env.ParseConfig('%s %s --libs %s' % \
                               (env["LLVM_CONFIG"], llvm_linkage_type_flag, llvm_required_components), \
                               function=llvm_config_sanitizer.sanitize)
else:
    # Just grab the statics regardless of version
    shared_env.ParseConfig('%s %s --libs %s' % \
                           (env["LLVM_CONFIG"], llvm_linkage_type_flag, llvm_required_components), \
                           function=llvm_config_sanitizer.sanitize)
shared_env.Append(LIBS=['stdc++', ], LIBPATH=['.'])
libhammer_shared = shared_env.SharedLibrary('hammer', parsers + backends + misc_hammer_parts)

Default(libhammer_shared, libhammer_static)

env.Install("$libpath", [libhammer_static, libhammer_shared])
env.Install("$incpath", dist_headers)
env.Install("$parsersincpath", parsers_headers)
env.Install("$backendsincpath", backends_headers)
env.Install("$pkgconfigpath", "../../../libhammer.pc")

testenv = env.Clone()
testenv.Append(LIBS=['hammer'], LIBPATH=['.'])
testenv.ParseConfig('pkg-config --cflags --libs glib-2.0')
# Get LLVM stuff into LIBS/LDFLAGS
testenv.ParseConfig('%s --ldflags %s %s %s' % \
                    (env["LLVM_CONFIG"], llvm_system_libs_flag, llvm_linkage_type_flag, llvm_required_components), \
                    function=llvm_config_sanitizer.sanitize)
# Get the right -l lines in
if llvm_use_shared:
    if llvm_use_computed_shared_lib_name:
        testenv.Append(LIBS=[llvm_computed_shared_lib_name, ])
    else:
        testenv.ParseConfig('%s %s --libs %s' % \
                            (env["LLVM_CONFIG"], llvm_linkage_type_flag, llvm_required_components), \
                            function=llvm_config_sanitizer.sanitize)
else:
    # Just grab the statics regardless of version
    testenv.ParseConfig('%s %s --libs %s' % \
                        (env["LLVM_CONFIG"], llvm_linkage_type_flag, llvm_required_components), \
                        function=llvm_config_sanitizer.sanitize)
testenv.Append(LIBS=['stdc++'], LIBPATH=['.'])
ctestexec = testenv.Program('test_suite', ctests + ['test_suite.c'], LINKFLAGS="--coverage" if testenv.GetOption("coverage") else None)
ctest = Alias('testc', [ctestexec], "".join(["env LD_LIBRARY_PATH=", os.path.dirname(ctestexec[0].path), " ", ctestexec[0].path]))
AlwaysBuild(ctest)
testruns.append(ctest)

Export("libhammer_static libhammer_shared")

for b in env['bindings']:
    env.SConscript(["bindings/%s/SConscript" % b])
